<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title></title>
   
   <link>http://prerit2010.github.io/</link>
   <description>A blog by Prerit Garg.</description>
   <language>en-uk</language>
   <managingEditor> prerit2010</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>GSoC 2016 Project - Front end improvements</title>
	  <link>//GSoC-Project-Front-end-improvements</link>
	  <author>prerit2010</author>
	  <pubDate>2016-07-29T15:48:00+05:30</pubDate>
	  <guid>//GSoC-Project-Front-end-improvements</guid>
	  <description><![CDATA[
	     <p>As only 2-3 weeks are left in the GSoC period, most of the major work has been done. Though some improvements are required, but these improvements will never come to end, as a software has always some room for improvements.</p>

<ul>
  <li>One of the major things left to be implemented was the integration of attempts with the results. Initially data was being shown for all attempts of each user. Now I have added a toggle button to switch between latest attempt and all attempts. By default it remains in off state, i.e. latest attempt state.</li>
</ul>

<p><img src="http://imgur.com/aMU95Zr.png" alt="image1" />  <img src="http://imgur.com/sOK7Fff.png" alt="image2" /></p>

<ul>
  <li>As the failed packages list is huge, and we need to visualize it in a graph, plotly selects some of the values to be displayed by default, and rest of those can be seen by zooming in the graph by drawing a box on it. But we are not be concerned to look at all the data in one go. So it’s better to have an option to show only top 10-12 results of failed packages. So I added a toggle button to switch between top 12 and all results. By default it shows only top 12.</li>
</ul>

<p><img src="http://imgur.com/RHOKVsb.png" alt="image3" /></p>

<ul>
  <li>Raniere suggested to have another plot for showing the list of failed packages grouped by only names, not version. It just required to query the database and grouping the packages by their names only.</li>
</ul>

<p><img src="http://imgur.com/E7ydu8s.png" alt="image4" /></p>

<ul>
  <li>
    <p>There was an issue with the packages having version in the format like : <strong>2.7.10 (default, Oct 14 2015, 16:09:02) [GCC 5.2.1 20151010]</strong>. On clicking on these packages through the dropdown, they did not show any details on the <code class="highlighter-rouge">/view/detail/</code> page. The issue was because of the presence of ‘\n’ between <strong>2.7.10 (default, Oct 14 2015, 16:09:02)</strong>  and  <strong>[GCC 5.2.1 20151010]</strong>. When they were selected from the dropdown, ‘\n’ was converted to ‘\r\n’. And thus it did not match with any entry in the database. So I removed the ‘\n’ from the package versions when they are received in the request from installation test scripts.</p>
  </li>
  <li>
    <p>Earlier, <strong>all attempts</strong> and <strong>latest attempt</strong> was integrated only on the <code class="highlighter-rouge">/view/</code> page. But this was not consistent with the <code class="highlighter-rouge">/view/details/</code> page. So I added the parameter of all_attempts while requesting the details for that package. Now the details shown for the package are also attempts based.</p>
  </li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>GSoC 2016 Project - Front end weekly update 2.0</title>
	  <link>//GSoC-Project-Front-end-weekly-update-2</link>
	  <author>prerit2010</author>
	  <pubDate>2016-07-20T15:48:00+05:30</pubDate>
	  <guid>//GSoC-Project-Front-end-weekly-update-2</guid>
	  <description><![CDATA[
	     <ul>
  <li>
    <p>The endpoint <code class="highlighter-rouge">/view/detail/</code> initially returned only json. I have created the front-end for the same. Several details like operating system used, linux distribution, platform etc were to be shown. I chose to show charts only for operating systems and python version used, and rest all shall be shown in a <strong>tabular</strong> form.</p>
  </li>
  <li>
    <p>Also, for all the charts, I have also added an option to view the data in the tabular form. When the button is clicked, the tables expand and the data can be viewed in tabular form as well.</p>
  </li>
  <li>
    <p>As there are a lot failed packages, the list is huge, and thus the graph doesn’t show all the values, but it selects some of those to be viewed. In order to see the hidden values, one can zoom in the graph and take a closer look at it.</p>
  </li>
  <li>
    <p><a href="https://github.com/rgaiacs">Raniere</a> suggested to limit this graph upto top 10 failed packages, and expand the view to all the packages on user’s request. This seems quite legitimate, and I will work upon it.</p>
  </li>
  <li>
    <p>The <code class="highlighter-rouge">linux_distribution_name</code> and <code class="highlighter-rouge">version</code> are properties valid only for linux. On Mac and Windows, these values are returned as empty strings. And thus, in the chart of linux distribution name and version, data count was also being displayed for the empty strings. This was a quick fix issue.</p>
  </li>
  <li>
    <p>Raniere suggested to have both the dropdowns (filter by workshop and filter by package name) at one place (at the top). This also didn’t require to have that checkbox for showing data for all workshops. Neat :-)</p>
  </li>
  <li>
    <p>Meanwhile, there was also a requirement for creating a <strong>sample database</strong> to test the interface. So I created a command in <code class="highlighter-rouge">manage.py</code> to import the database. I did this using <code class="highlighter-rouge">SQL</code> file. The <code class="highlighter-rouge">sample.sql</code> file contains the SQL insert queries, and these are used to insert the data in the database after the database is created. In case the user wants to overwrite the data, and refresh it with previous sample data, <code class="highlighter-rouge">--overwrite</code> option can be used with the command <code class="highlighter-rouge">import_db</code>.</p>
  </li>
  <li>
    <p>One important feature to be implemented is the integration of <strong>attempts</strong> with failed packages. Currently data is returned for all the attempts. <a href="https://github.com/pbanaszkiewicz">Piotr</a> suggested to have a <strong>toggle button</strong> to switch all attempts on and off. If all attempts button is switched on, data is shown for all the attempts of all users. While if it is in off state, only the latest attempt is considered.</p>
  </li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>GSoC 2016 Project - Front end weekly update</title>
	  <link>//GSoC-Project-Front-end-weekly-update</link>
	  <author>prerit2010</author>
	  <pubDate>2016-07-12T15:48:00+05:30</pubDate>
	  <guid>//GSoC-Project-Front-end-weekly-update</guid>
	  <description><![CDATA[
	     <p>Front end work is on its way. I have created 3 endpoints as of now.</p>

<ul>
  <li><code class="highlighter-rouge">/view/</code> : This shows the charts for all the workshops without any filtering. Currently I have added just 2 charts :
    <ul>
      <li>One for different OS users across all the workshops</li>
      <li>Other for most failed packages across all the workshops.</li>
    </ul>
  </li>
</ul>

<p>There is one problem with the second one, as the number of failed packages can be too much, all of them are not showing up, we may have to zoom in the chart to view all of them, and there is difficulty in reading the names :</p>

<p><img src="http://i.imgur.com/95F6CCh.png" alt="image" /></p>

<p>One solution is to keep the bar chart horizontal. But as the version names in some cases are too long, a lot of margin is needed in the left side of the graph. So maybe we can cut short the version names in case they are long.</p>

<ul>
  <li>
    <p><code class="highlighter-rouge">/view/&lt;workshop_id&gt;/</code> : This show the results only for a particular workshop. I have also provided a dropdown of a list of workshops, selecting one of which leads to this endpoint with charts only for this workshop.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">/view/detail/</code> : I have also provided a dropdown list of failed packages, selecting one of which hits this endpoint and shows the environment details, like what operating system or environment was used during testing of that failed package. Currently only json is returned.</p>
  </li>
</ul>

<p>In all of the above endpoints, there is an option to export the data into json. For example : <code class="highlighter-rouge">/view/?export=json</code></p>

<ul>
  <li>While we are on the page of a particular workshop, when we select one of the failed packages from the dropdown list, it shows the details of that workshop only. I have also added a checkbox by which we can get details about all the workshops if we want. This checkbox appears only when we are at <code class="highlighter-rouge">/view/&lt;workshop_id&gt;</code>, and not on <code class="highlighter-rouge">/view/</code>.</li>
</ul>

<p><img src="http://imgur.com/JWyfPeg.png" alt="image" /></p>

<p>On hitting submit button leads to <code class="highlighter-rouge">/view/detail/?...</code> and displays the details about systems used during testing of that package.</p>

	  ]]></description>
	</item>

	<item>
	  <title>GSoC 2016 Project - Front end and split script</title>
	  <link>//GSoC-Project-front-end-and-split-script</link>
	  <author>prerit2010</author>
	  <pubDate>2016-07-05T15:48:00+05:30</pubDate>
	  <guid>//GSoC-Project-front-end-and-split-script</guid>
	  <description><![CDATA[
	     <p>I have decided to use <a href="https://plot.ly/javascript/">plotly.js</a> primarily for plotting the graphs, but as it hardly matters, I can use other libraries as well as per the requirements. To start with, I added a graph for number of users using different operating systems, and most failed installs packages till date.</p>

<ul>
  <li>Here we have 2 cases to follow in case of failed installs packages.
    <ul>
      <li>User may have run the script many times, and so all the attempts are saved. So one case is to show the graph on the basis of all the data (including all attempts of a user).</li>
      <li>Other case is to have the graph show only the latest attempt. So, we would like to have a toggle button to switch on “Only latest attempt”, or switch it off to show all the data.</li>
    </ul>
  </li>
  <li>
    <p>The graphs should also be filtered on the basis of workshop. We can have a dropdown containing a list of all the workshops, and selecting one of which will lead to filtering the data for that workshop ONLY.</p>
  </li>
  <li>
    <p><a href="https://github.com/rgaiacs">Raniere</a> pointed out to have raw json as well in place for the information that we are going to display. For example : <a href="">http://installation.software-carpentry.org/view/?export=json</a>. So we can have the json formatted data for all the information that we tend to receive, and just use this json to display charts in the HTML pages as well.</p>
  </li>
  <li>
    <p>Project was initially built on python 2.7 (I don’t know why didn’t I use python3 from the beginning :p), but now I have migrated it to python 3.5. It didn’t require a lot of tasks, just some fixes in importing the files.</p>
  </li>
  <li>In the installation test scripts, 2 more command line options have been added :
    <ul>
      <li><code class="highlighter-rouge">-H</code> to specify the HOST name to which the data should be submitted. for example : <code class="highlighter-rouge">python swc-main.py -H 127.0.0.1:5000</code>.</li>
      <li><code class="highlighter-rouge">-n</code> to turn off sending data to server. e.g : <code class="highlighter-rouge">python swc-main.py -n</code></li>
    </ul>
  </li>
  <li>
    <p>Changed the name of “key.txt” file to ‘.swc_submission_id’, as now it would remain hidden, and having <strong>swc</strong> in the file name tells that it belongs to software carpentry.</p>
  </li>
  <li><a href="https://github.com/pbanaszkiewicz">Piotr</a> suggested to split the long script, and having something like :</li>
</ul>

<div class="language-python highlighter-rouge"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">requirements_check</span>
<span class="kn">import</span> <span class="nn">api</span> <span class="kn">as</span> <span class="nn">API</span>

<span class="n">REQUIRED</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">'python&gt;=3.5'</span><span class="p">,</span>
    <span class="s">'numpy'</span><span class="p">,</span>
<span class="p">]</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">errors</span><span class="p">,</span> <span class="n">passed</span> <span class="o">=</span> <span class="n">requirements_check</span><span class="o">.</span><span class="n">check</span><span class="p">(</span><span class="n">REQUIRED</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">error</span> <span class="ow">in</span> <span class="n">errors</span><span class="p">:</span>
        <span class="c"># communicate error to the user</span>

        <span class="c"># gives user a pointer on what to do when something fails</span>
        <span class="n">solution</span> <span class="o">=</span> <span class="n">requirements_check</span><span class="o">.</span><span class="n">solution</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>

        <span class="k">pass</span>

    <span class="c"># check if user agrees to submit their data</span>
    <span class="n">agreement</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">'...'</span><span class="p">)</span>
    <span class="n">submition_id</span> <span class="o">=</span> <span class="n">API</span><span class="o">.</span><span class="n">submit</span><span class="p">(</span><span class="n">errors</span><span class="p">,</span> <span class="n">passed</span><span class="p">)</span>

    <span class="c"># add logic for working with the submition_id</span>
    <span class="k">pass</span>

    <span class="c"># logic for submitting workshop name and email</span>
    <span class="k">pass</span>
</code></pre>
</div>

<p>So that’s what I have done. I have separated the code for <strong>API</strong>, <strong>requirements_check</strong> and running the script. Also there used to be 2 scripts, 1 for checking the python version, and the other for checking the other requirements. But now, I have merged the first script in the second. So previous structure was :</p>

<div class="highlighter-rouge"><pre class="highlight"><code>|__/swc-setup-installation-test
	|--swc-installation-test-1.py
	|--swc-installation-test-2.py
</code></pre>
</div>
<p>But now it is :</p>

<div class="highlighter-rouge"><pre class="highlight"><code>|__/swc-setup-installation-test
	|--api.py
	|--requirements_checks.py
	|--swc-main.py
</code></pre>
</div>

<p><code class="highlighter-rouge">swc-main.py</code> is the only script that needs to be run. It imports <strong>api</strong> and <strong>requirements_checks</strong> for checking the installation dependencies and sending them to server.</p>

<p>It looks good as of now, a lot of documentation is required to be done though.</p>

	  ]]></description>
	</item>

	<item>
	  <title>GSoC 2016 Project - Weekly update</title>
	  <link>//GSoC-Project-weekly-update</link>
	  <author>prerit2010</author>
	  <pubDate>2016-06-28T15:48:00+05:30</pubDate>
	  <guid>//GSoC-Project-weekly-update</guid>
	  <description><![CDATA[
	     <p>Added <a href="https://travis-ci.org/">Travis-CI</a> integration in the API. Now at each commit I make on github, Travis will test the API by running the <code class="highlighter-rouge">test.py</code> file, and will inform if the build fails.</p>

<p>In the API, when a user sends the data with same <code class="highlighter-rouge">unique_user_id</code>, i.e another attempt, API was not updating the <code class="highlighter-rouge">UserSystemInfo</code> on this request, assuming the system’s information will remain same even in the second request. But this isn’t true for <code class="highlighter-rouge">email_id</code> and <code class="highlighter-rouge">workshop_id</code>. A user may enter the email id in the second attempt, while may have denied in the previous one. And also, they may have entered a wrong email id in the previous attempt, so they might want to update them in the next. So everytime a user makes a request, system’s information is also updated.</p>

<p>But this may create a problem. If second time user doesn’t enter the email and workshop id, the API will rewrite the email and workshop field to <code class="highlighter-rouge">None</code>. So API should update only when the received email or workshop id is <strong>not</strong> <code class="highlighter-rouge">None</code>. Added the unit test for the same.</p>

<p>Tested the scripts at various platform of linux and windows as well. But I had no access to OS X. So <a href="https://github.com/pbanaszkiewicz">Piotr Banaszkiewicz</a> asked <a href="https://github.com/gvwilson">Greg Wilson</a> to test the scripts on his OS X machine and share the feedback with us. The scripts ran without any issues on OS X as well.</p>

<p>I have increased the rate limit to 500 per hour per IP for the time. As when I was testing the API on my computer, the test script made more than 10 calls to API on single execution, and thus very soon all the tests started failing, as the limit had reached.</p>

<p>Now, I think it’s time to get going with the frontend, and visualize the data with charts and statistics. There are several options like <a href="https://plot.ly/javascript/">Plotly.js</a>, <a href="http://c3js.org/">C3.js</a>, <a href="http://metricsgraphicsjs.org/">MetricGRaphics.js</a> etc. I’ll select the most approriate library after having all the use cases with me. MetricGraphics is a well maintained JS library by Mozilla. But it seems like more for timeline purpose. So I may have to rely either on Plotly or C3. They kinda do justice to my requirements. Anyway, I’ll come to that later.</p>

	  ]]></description>
	</item>

	<item>
	  <title>GSoC 2016 Project - API Deployment and Testing</title>
	  <link>//GSoC-Project-Deployment-Testing</link>
	  <author>prerit2010</author>
	  <pubDate>2016-06-23T15:48:00+05:30</pubDate>
	  <guid>//GSoC-Project-Deployment-Testing</guid>
	  <description><![CDATA[
	     <p>One of the most tedious task in any python web application project is the <strong>Deployment</strong> (at least for those who haven’t tasted it yet). I have done this many times, but it still annoys me ;-). May be that’s why companies have a separate Devops team who look into all of these deployment issues. Well, whether it feels good or not, I have deployed my flask API on the <a href="">nginx</a> server which runs on Ubuntu 16.04. The usual steps : Creating <strong>uwsgi configuration file</strong>, <strong>nginx configuration file</strong> etc. Earlier I used to create an <em>upstart script</em> to automatically run uwsgi on reboot of system, but as it turned out, since Ubuntu 15.04, systemd services have been made as default. So basically now I created a <em>systemd</em> service unit file, and started it using <code class="highlighter-rouge">sudo systemctl start Result-aggregation-server</code>.</p>

<p>Major portion of the code like inserting the data in the tables has been done. Now it needed some testing. I had added the feature of unique key in the installation test scripts, i.e whenever a request is sent to server, a unique is sent along with the data to identify the user. But as it got struck in my mind, if by any chance the user accidentally changes the unique key manually in <code class="highlighter-rouge">key.txt</code>, then their will be inconsistent data in the table. So I inserted a check upon the validity of the key as well, as whether a record exists with this unique Key or not.</p>

<p><strong>Unit Tests:</strong> Also wrote a few unit test to test some important use cases. For example:</p>

<ul>
  <li>If the <code class="highlighter-rouge">successful_installs</code> list is empty</li>
  <li>If the <code class="highlighter-rouge">failed_installs</code> list is empty</li>
  <li>Deleting a user should also delete its corresponding success and fail data.</li>
</ul>

<p>I also tested the scripts on windows platform and other linux distribution, there were some errors like version couldn’t be found, etc. Well, now they seem to be working well.</p>

<p>During the course of testing the scripts and API, I came across with 2 issues :</p>

<ul>
  <li>If we ask the users to input the email id and workshop id, and in case they do not want to provide their email id, they might terminate the script completely. This would prevent any data to be pushed to server. So maybe we should totally remove the idea of any such user input. But, having said that, workshop id can be a really useful data.</li>
</ul>

<p>Above issue has been resolved by simply asking from the user whether they want to share their email id and workshop id.</p>

<ul>
  <li>As the scripts are totally open source, and thus our API endpoint, we should have some kind of secret key required to push the data to server, as otherwise any random person (with dirty intention) can harm our server severely.</li>
</ul>

<p>Above issue is resolved by throttling. Using redis, requests are limited to 100 per IP per hour.</p>

<p>Further steps may include the development of the front end with charts and statistics to extract some useful information out of the data received from installation scripts.</p>

	  ]]></description>
	</item>

	<item>
	  <title>GSoC 2016 Project - Schema update</title>
	  <link>//GSoC-Project-Schema-update</link>
	  <author>prerit2010</author>
	  <pubDate>2016-06-02T15:48:00+05:30</pubDate>
	  <guid>//GSoC-Project-Schema-update</guid>
	  <description><![CDATA[
	     <p>The concern regarding the updation of data, if the user run the scripts several times has been resolved . Initially I had thoughts of using <em>workshop_id</em> and <em>email_id</em> to identify the user. But as it turned out, we had to capture the data even if a user doesn’t provide their <em>email_id</em> and <em>workshop_id</em>. So as proposed by <a href="https://github.com/pbanaszkiewicz">Piotr Banaszkiewicz</a>, we can use a hash which will be returned by API to the user. This hash can then be saved on the disk.</p>

<p>We have to keep a track of the user’s progress during installation of packages. So everytime a user runs the script, all the data is logged in the tables. But this would require an attempt number to be associated with each request, so that, each attempt can be distinguished from the other. I have added a table <strong>Attempts</strong>, the primary key of which will be used as foreign key in both tables, and would allow us to distinguish between attempts.</p>

<p><strong>Therefore, on each request a user makes, following things are done:</strong></p>

<ul>
  <li>Script checks whether it already has a unique key in the file ‘key.txt’. If yes, it checks whether the date of the key and current date are same. As this key might have been generated for some other workshop held on some other day.</li>
  <li>If both checks are passed, then it sends this unique key along with the data. Else, unique key is set to None.</li>
  <li>Server checks whether it already has a ‘user’ record for this unique id. If yes, same user id is used for insertion of data in the tables.</li>
  <li>Attempts table contains a primary key <code class="highlighter-rouge">id</code> which is also the foreign key in ‘successfull_installs’ and ‘failed_installs’ tables. Using this key, attempts/progress of the user can be tracked down.</li>
</ul>

<p>A unique id is associated with each user and their several attempts. This helps in recognizing the existing user, and thus associating the same user id with <em>failed</em> and <em>succesfull installs</em>. I chose to use UUID over hash, as it is much easier to handle. Refer this <a href="http://stackoverflow.com/questions/703035/when-are-you-truly-forced-to-use-uuid-as-part-of-the-design/786541#786541">link</a>. And it also turns out to be better than hashing technique like SHA1 in some aspects. Refer this <a href="https://www.percona.com/blog/2007/03/13/to-uuid-or-not-to-uuid/">link</a></p>
<font color="Green"><b>Summing up, following things have been done till date :</b></font>
<p><br />
<i class="fa fa-check" aria-hidden="true"></i>   Develop models of database using SQLAlchemy. <br />
<i class="fa fa-check" aria-hidden="true"></i>   Migration of database using Flask-Migrate. <br />
<i class="fa fa-check" aria-hidden="true"></i>   API endpoint “/installation_data/”. <br />
<i class="fa fa-check" aria-hidden="true"></i>   Database connection with API. <br />
<i class="fa fa-check" aria-hidden="true"></i>   Modification of installation script to send data to server (POST request). <br />
<i class="fa fa-check" aria-hidden="true"></i>   Saving key to local disk for unique identification. <br /></p>

<font color="Red"><b>TODO :</b></font>
<p><br />
<i class="fa fa-tasks" aria-hidden="true"></i>   Sending the error description and causes along with failure and success list. <br />
<i class="fa fa-tasks" aria-hidden="true"></i>   Collecting User’s system information for sending to server.<br />
<i class="fa fa-tasks" aria-hidden="true"></i>   Writing Unit tests.<br />
<i class="fa fa-tasks" aria-hidden="true"></i>   Analysis of results.<br />
<i class="fa fa-tasks" aria-hidden="true"></i>   Writing the front end to visualize the data.<br />
<i class="fa fa-tasks" aria-hidden="true"></i>   Testing and Bug fixes. <br />
<i class="fa fa-tasks" aria-hidden="true"></i>   Testing the scripts on several operating systems. <br /></p>

<p><strong>Project Code:</strong></p>

<ul>
  <li>API Repository : <a href="https://github.com/prerit2010/Result-aggregation-server">Result-aggregation-server</a></li>
  <li>Scripts Repository : <a href="https://github.com/prerit2010/swc-setup-installation-test">swc-setup-installation-test</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Beginning the GSoC Project</title>
	  <link>//Beginning-the-GSoC-Project</link>
	  <author>prerit2010</author>
	  <pubDate>2016-05-26T15:48:00+05:30</pubDate>
	  <guid>//Beginning-the-GSoC-Project</guid>
	  <description><![CDATA[
	     <p>After 2 long exhausting weeks of exams, I am finally done with my graduation :). And now I have buckled up to code the summer away with Software Carpentry (NumFocus).</p>

<p>As I had figured out earlier, the installation data about the packages, like name and version is easily available in the <a href="https://github.com/wking/swc-setup-installation-test">installation test scripts</a> in the form of a list. But this case is only for successful installs. For failures I don’t have a direct list, rather I have a list of messages that are displayed by the script to the users for each failure, which have been designed something like this:</p>

<div class="language-python highlighter-rouge"><pre class="highlight"><code><span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">url</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_url</span><span class="p">()</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="p">[</span>
            <span class="s">'check for {0} failed:'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">checker</span><span class="o">.</span><span class="n">full_name</span><span class="p">()),</span>
            <span class="s">'  '</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">message</span><span class="p">,</span>
            <span class="s">'  For instructions on installing an up-to-date version, see'</span><span class="p">,</span>
            <span class="s">'  '</span> <span class="o">+</span> <span class="n">url</span><span class="p">,</span>
            <span class="p">]</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">causes</span><span class="p">:</span>
            <span class="n">lines</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">'  causes:'</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">cause</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">causes</span><span class="p">:</span>
                <span class="n">lines</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="s">'  '</span> <span class="o">+</span> <span class="n">line</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="n">cause</span><span class="p">)</span><span class="o">.</span><span class="n">splitlines</span><span class="p">())</span>
        <span class="k">return</span> <span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
</code></pre>
</div>

<p>So, I’ll have to format the data and make it appropriate to be sent to server.</p>

<p>As per the discussion with my mentor <strong>@pbanaszkiewicz</strong>, I will get back to installation scripts a litter later. Firstly I’ll be creating the server and API, it will help me in understanding the format and requirement of data which is to be prepared later during modification of installation test scripts.</p>

<p>So, I have begun working on the server side, the code of which resides in the github repository <a href="https://github.com/prerit2010/Result-aggregation-server">Result-aggregation-server</a>. API is to be built using python’s micro web framwork flask. Following are the basic requirements of this API:</p>

<ul>
  <li><a href="http://flask.pocoo.org/">Flask</a></li>
  <li><a href="http://www.sqlalchemy.org/">SQLAlchemy</a></li>
  <li><a href="https://www.sqlite.org/">SQLite</a></li>
  <li><a href="https://flask-migrate.readthedocs.io/en/latest/">Flask-Migrate</a></li>
</ul>

<p>I have created an endpoint <strong>installation_data</strong> which sends the user’s system information, the installed packages by the user, and failed packages. The installation script should make a POST request with headers : <strong>“Content-Type : application/json”</strong> to this end point. Currently there are 3 tables in the database namely <strong>user_system_info</strong>, <strong>successful_installs</strong>, and <strong>failed_installs</strong>. Both successful_installs and failed installs contain a foreign key which references the id of user table. The schema is as follows:
<img src="http://i.imgur.com/vTTrkDP.png" alt="image" /></p>

<p>I have created the <a href="https://github.com/prerit2010/Result-aggregation-server/blob/master/app/models.py">models</a> and also the relationship between the tables (one to many). Each time there is any change in the schema I run the migration script <code class="highlighter-rouge">manage.py</code> which migrates and then upgrades the schema. This script uses <a href="https://flask-migrate.readthedocs.io/en/latest/">Flask-migrate</a> which is built on top of <a href="http://alembic.readthedocs.io/en/latest/">alembic</a>. Data that is to be sent by installation test scripts will be a dictionary with 3 keys: <em>user_system_info</em> , <em>succesful_installs</em>, and <em>failed_installs</em>. Here, <em>user_system_info</em> will be a dictionary, <em>successful_installs</em>, a list of dictionaries, and <em>failed_installs</em>, a list of dictionaries too. I have written the <a href="https://github.com/prerit2010/Result-aggregation-server/blob/master/app/views.py">endpoint</a> and tested it using curl. Everything seems to be working correctly. Although, there are some constrains to be applied during the insertion of data. One user may run the script many times, in that case data should be updated instead of insertion. I’m planning to use the combination of <em>email_id</em> and <em>workshop_id</em> as the unique key to identify a user and update their data. Also, the response the API gives can be improved, as it may contain some useful information for the user. Will post further updates soon. Cheers! :)</p>

	  ]]></description>
	</item>

	<item>
	  <title>GSoC2016 - Community Bonding Experience</title>
	  <link>//GSoC2016-Community-Bonding-Experience</link>
	  <author>prerit2010</author>
	  <pubDate>2016-05-07T15:48:00+05:30</pubDate>
	  <guid>//GSoC2016-Community-Bonding-Experience</guid>
	  <description><![CDATA[
	     <p>The <strong>Community Bonding period</strong> of <a href="https://summerofcode.withgoogle.com/">Google Summer of Code 2016</a> started from <em>April 23, 2016</em> and will last till <em>May 22, 2016</em>.</p>

<p>During this period students are expected to learn about their community, get to know the code base, setup the environment etc. My project focuses around creating an API to store the results of <a href="https://github.com/wking/swc-setup-installation-test">installation test scripts</a>. For more about it, take a look at <a href="https://github.com/numfocus/gsoc/blob/master/2016/ideas-list-swc.md#write-a-result-aggregation-server-for-the-installation-test-scripts">Project Description</a>. I had been in conversation with my mentors through emails, a couple of follow up tasks were decided to be done during this period:</p>

<ul>
  <li>Install some <strong>Virtual Machines</strong> on the system, as the code shall be tested on several operating systems.</li>
  <li>Get to know the working of <strong>Installation test scripts</strong>.</li>
</ul>

<h4 id="virtual-machines-installation">Virtual Machines Installation</h4>

<p>I didn’t have any significant experience in playing around with Virtual Machines. I needed to install <a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/linux/">Windows Virtual machines</a> as well. They required a lot of space, so the first requirement was external Hard Drive. So I bought a 2TB WD My Passport Ultra to do the work. Initially I was having a hard time searching around the ways to install VMs on External Hard Drive. After Googling around a bit, I found about <a href="http://www.vbox.me/">Portable Virtual Box</a>, allows you to create portable operating systems and run them on any PC. But apparently that’s available only for Windows. But, I won’t require that, as selecting the destination folder as External Hard drive would do the trick for me.</p>

<p>So long story short, I have installed <a href="https://www.virtualbox.org/wiki/Linux_Downloads">Virtual box for Ubuntu 15.10</a>. Selected the destination folder for the VMs as the external Hard Drive. And installed the following VMs:</p>

<ul>
  <li><a href="https://getfedora.org/en/workstation/download/">Fedora Workstation 23</a></li>
  <li><a href="https://www.debian.org/distrib/">Debian 8.4</a></li>
  <li><a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/linux/">Windows 7 32-bit</a></li>
  <li><a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/linux/">Windows 8.1 32-bit</a></li>
  <li><a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/linux/">Windows 10 64-bit</a></li>
</ul>

<p>So, I’ll be testing the code on the above platforms including <strong>Ubuntu</strong>, which is my host operating system. Testing is to be done for the installation scripts, as students who attend the workshops use different platforms to run these scripts.
I’ve also created <strong>snapshots</strong> of the Virtual Machines, as Windows VMs provided by Microsoft
will expire after 90 days. Initially I was worried about the performance of Virtual Machines on Virtualbox, but they seem to be working <strong>Nicely</strong> as of now. :)</p>

<h4 id="installation-test-scripts">Installation Test Scripts</h4>

<p><a href="https://github.com/wking/swc-setup-installation-test">Installation test scripts</a> are to be updated to add the feature of sending the data to the server, that I’ll be creating during the coding period. I went through the scripts, and I must say, its written quite comprehensively. Also, the best part being, it may not be required to play with a lot of code in there, as the information that I need from the script, which is mainly <strong>successfully installed packages</strong> list and <strong>failed installed packages</strong> list is directly available in the form of <code class="highlighter-rouge">python lists</code>. Here is a little code snippet of that :</p>

<div class="language-python highlighter-rouge"><pre class="highlight"><code><span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="n">checks</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="n">successes</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">failures</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">checks</span><span class="p">:</span>
        <span class="n">checks</span> <span class="o">=</span> <span class="n">CHECKS</span>
    <span class="k">for</span> <span class="n">check</span> <span class="ow">in</span> <span class="n">checks</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">checker</span> <span class="o">=</span> <span class="n">CHECKER</span><span class="p">[</span><span class="n">check</span><span class="p">]</span>
        <span class="k">except</span> <span class="nb">KeyError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">raise</span> <span class="n">InvalidCheck</span><span class="p">(</span><span class="n">check</span><span class="p">)</span><span class="c"># from e</span>
        <span class="n">_sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">'check {0}...</span><span class="se">\t</span><span class="s">'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">checker</span><span class="o">.</span><span class="n">full_name</span><span class="p">()))</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">version</span> <span class="o">=</span> <span class="n">checker</span><span class="o">.</span><span class="n">check</span><span class="p">()</span>
        <span class="k">except</span> <span class="n">DependencyError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">failures</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
            <span class="n">_sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">'fail</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">_sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">'pass</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
            <span class="n">successes</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">checker</span><span class="p">,</span> <span class="n">version</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">successes</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">Successes:</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">checker</span><span class="p">,</span><span class="n">version</span> <span class="ow">in</span> <span class="n">successes</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">'{0} {1}'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
                    <span class="n">checker</span><span class="o">.</span><span class="n">full_name</span><span class="p">(),</span>
                    <span class="n">version</span> <span class="ow">or</span> <span class="s">'unknown'</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">failures</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">Failures:'</span><span class="p">)</span>
        <span class="n">printed</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">failure</span> <span class="ow">in</span> <span class="n">failures</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">failure</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">printed</span><span class="p">:</span>
                <span class="k">print</span><span class="p">()</span>
                <span class="k">print</span><span class="p">(</span><span class="n">failure</span><span class="p">)</span>
                <span class="n">printed</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">failure</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="bp">True</span>
</code></pre>
</div>

<p>I’ve my end semester exams coming up from 9 May, 2016, so will be occupied with that mostly from now on. Will post further updates soon! :)</p>

	  ]]></description>
	</item>

	<item>
	  <title>Hello World!</title>
	  <link>//hello-world</link>
	  <author>prerit2010</author>
	  <pubDate>2016-04-26T15:48:00+05:30</pubDate>
	  <guid>//hello-world</guid>
	  <description><![CDATA[
	     <div class="language-python highlighter-rouge"><pre class="highlight"><code><span class="k">print</span> <span class="s">'Hello World!'</span>
</code></pre>
</div>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="err">'</span><span class="n">Hello</span> <span class="n">World</span><span class="o">!</span><span class="err">'</span><span class="o">);</span>
</code></pre>
</div>

<div class="language-c++ highlighter-rouge"><pre class="highlight"><code><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"Hello World!"</span><span class="p">;</span>
</code></pre>
</div>

<div class="language-c highlighter-rouge"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"Hello World!"</span><span class="p">);</span>
</code></pre>
</div>

<p>This is a convention followed by almost every programmer to start learning to code with a simple ‘Hello World’ program. Every tutorial, and nowadays every blog starts with Hello World. I prefer not to break this convention, and start by writing my first blogpost as ‘Hello World!’ :)</p>

<p>For quite a long time I had been thinking to start writing blogposts, and had been developing my blog using flask web framework. But laziness or whatever you can say, delayed it. But as quoted by someone:</p>

<blockquote>
  <p>Necessity is the mother of invention!</p>
</blockquote>

<p>I have finally ended up using Github Pages for my blog.<br />And the Necessity is:	I need to write my <a href="https://summerofcode.withgoogle.com/">Google Summer of Code 2016</a> project progress as blog posts every 2 weeks :D.</p>

<p>I’ll not only be writing about the projects or technical stuffs, but also about my life experiences.  So here we go! ;)</p>

	  ]]></description>
	</item>


</channel>
</rss>
