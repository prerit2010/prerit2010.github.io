<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title></title>
   
   <link>http://prerit2010.github.io/</link>
   <description>A blog by Prerit Garg.</description>
   <language>en-uk</language>
   <managingEditor> prerit2010</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Beginning the GSoC Project</title>
	  <link>//Beginning-the-GSoC-Project</link>
	  <author>prerit2010</author>
	  <pubDate>2016-05-26T15:48:00+05:30</pubDate>
	  <guid>//Beginning-the-GSoC-Project</guid>
	  <description><![CDATA[
	     <p>After 2 long exhausting weeks of exams, I am finally done with my graduation :). And now I have buckled up to code the summer away with Software Carpentry (NumFocus).</p>

<p>As I had figured out earlier, the installation data about the packages, like name and version is easily available in the <a href="https://github.com/wking/swc-setup-installation-test">installation test scripts</a> in the form of a list. But this case is only for successful installs. For failures I don’t have a direct list, rather I have a list of messages that are displayed by the script to the users for each failure, which have been designed something like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">url</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_url</span><span class="p">()</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="p">[</span>
            <span class="s">'check for {0} failed:'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">checker</span><span class="o">.</span><span class="n">full_name</span><span class="p">()),</span>
            <span class="s">'  '</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">message</span><span class="p">,</span>
            <span class="s">'  For instructions on installing an up-to-date version, see'</span><span class="p">,</span>
            <span class="s">'  '</span> <span class="o">+</span> <span class="n">url</span><span class="p">,</span>
            <span class="p">]</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">causes</span><span class="p">:</span>
            <span class="n">lines</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">'  causes:'</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">cause</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">causes</span><span class="p">:</span>
                <span class="n">lines</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="s">'  '</span> <span class="o">+</span> <span class="n">line</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="n">cause</span><span class="p">)</span><span class="o">.</span><span class="n">splitlines</span><span class="p">())</span>
        <span class="k">return</span> <span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
</code></pre>
</div>

<p>So, I’ll have to format the data and make it appropriate to be sent to server.</p>

<p>As per the discussion with my mentor <strong>@pbanaszkiewicz</strong>, I will get back to installation scripts a litter later. Firstly I’ll be creating the server and API, it will help me in understanding the format and requirement of data which is to be prepared later during modification of installation test scripts.</p>

<p>So, I have begun working on the server side, the code of which resides in the github repository <a href="https://github.com/prerit2010/Result-aggregation-server">Result-aggregation-server</a>. API is to be built using python’s micro web framwork flask. Following are the basic requirements of this API:</p>

<ul>
  <li><a href="http://flask.pocoo.org/">Flask</a></li>
  <li><a href="http://www.sqlalchemy.org/">SQLAlchemy</a></li>
  <li><a href="https://www.sqlite.org/">SQLite</a></li>
  <li><a href="https://flask-migrate.readthedocs.io/en/latest/">Flask-Migrate</a></li>
</ul>

<p>I have created an endpoint <strong>installation_data</strong> which sends the user’s system information, the installed packages by the user, and failed packages. The installation script should make a POST request with headers : <strong>“Content-Type : application/json”</strong> to this end point. Currently there are 3 tables in the database namely <strong>user_system_info</strong>, <strong>successful_installs</strong>, and <strong>failed_installs</strong>. Both successful_installs and failed installs contain a foreign key which references the id of user table. The schema is as follows:
<img src="http://i.imgur.com/vTTrkDP.png" alt="image" /></p>

<p>I have created the <a href="https://github.com/prerit2010/Result-aggregation-server/blob/master/app/models.py">models</a> and also the relationship between the tables (one to many). Each time there is any change in the schema I run the migration script <code class="highlighter-rouge">manage.py</code> which migrates and then upgrades the schema. This script uses <a href="https://flask-migrate.readthedocs.io/en/latest/">Flask-migrate</a> which is built on top of <a href="http://alembic.readthedocs.io/en/latest/">alembic</a>. Data that is to be sent by installation test scripts will be a dictionary with 3 keys: <em>user_system_info</em> , <em>succesful_installs</em>, and <em>failed_installs</em>. Here, <em>user_system_info</em> will be a dictionary, <em>successful_installs</em>, a list of dictionaries, and <em>failed_installs</em>, a list of dictionaries too. I have written the <a href="https://github.com/prerit2010/Result-aggregation-server/blob/master/app/views.py">endpoint</a> and tested it using curl. Everything seems to be working correctly. Although, there are some constrains to be applied during the insertion of data. One user may run the script many times, in that case data should be updated instead of insertion. I’m planning to use the combination of <em>email_id</em> and <em>workshop_id</em> as the unique key to identify a user and update their data. Also, the response the API gives can be improved, as it may contain some useful information for the user. Will post further updates soon. Cheers! :)</p>

	  ]]></description>
	</item>

	<item>
	  <title>GSoC2016 - Community Bonding Experience</title>
	  <link>//GSoC2016-Community-Bonding-Experience</link>
	  <author>prerit2010</author>
	  <pubDate>2016-05-07T15:48:00+05:30</pubDate>
	  <guid>//GSoC2016-Community-Bonding-Experience</guid>
	  <description><![CDATA[
	     <p>The <strong>Community Bonding period</strong> of <a href="https://summerofcode.withgoogle.com/">Google Summer of Code 2016</a> started from <em>April 23, 2016</em> and will last till <em>May 22, 2016</em>.</p>

<p>During this period students are expected to learn about their community, get to know the code base, setup the environment etc. My project focuses around creating an API to store the results of <a href="https://github.com/wking/swc-setup-installation-test">installation test scripts</a>. For more about it, take a look at <a href="https://github.com/numfocus/gsoc/blob/master/2016/ideas-list-swc.md#write-a-result-aggregation-server-for-the-installation-test-scripts">Project Description</a>. I had been in conversation with my mentors through emails, a couple of follow up tasks were decided to be done during this period:</p>

<ul>
  <li>Install some <strong>Virtual Machines</strong> on the system, as the code shall be tested on several operating systems.</li>
  <li>Get to know the working of <strong>Installation test scripts</strong>.</li>
</ul>

<h4 id="virtual-machines-installation">Virtual Machines Installation</h4>

<p>I didn’t have any significant experience in playing around with Virtual Machines. I needed to install <a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/linux/">Windows Virtual machines</a> as well. They required a lot of space, so the first requirement was external Hard Drive. So I bought a 2TB WD My Passport Ultra to do the work. Initially I was having a hard time searching around the ways to install VMs on External Hard Drive. After Googling around a bit, I found about <a href="http://www.vbox.me/">Portable Virtual Box</a>, allows you to create portable operating systems and run them on any PC. But apparently that’s available only for Windows. But, I won’t require that, as selecting the destination folder as External Hard drive would do the trick for me.</p>

<p>So long story short, I have installed <a href="https://www.virtualbox.org/wiki/Linux_Downloads">Virtual box for Ubuntu 15.10</a>. Selected the destination folder for the VMs as the external Hard Drive. And installed the following VMs:</p>

<ul>
  <li><a href="https://getfedora.org/en/workstation/download/">Fedora Workstation 23</a></li>
  <li><a href="https://www.debian.org/distrib/">Debian 8.4</a></li>
  <li><a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/linux/">Windows 7 32-bit</a></li>
  <li><a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/linux/">Windows 8.1 32-bit</a></li>
  <li><a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/linux/">Windows 10 64-bit</a></li>
</ul>

<p>So, I’ll be testing the code on the above platforms including <strong>Ubuntu</strong>, which is my host operating system. Testing is to be done for the installation scripts, as students who attend the workshops use different platforms to run these scripts.
I’ve also created <strong>snapshots</strong> of the Virtual Machines, as Windows VMs provided by Microsoft
will expire after 90 days. Initially I was worried about the performance of Virtual Machines on Virtualbox, but they seem to be working <strong>Nicely</strong> as of now. :)</p>

<h4 id="installation-test-scripts">Installation Test Scripts</h4>

<p><a href="https://github.com/wking/swc-setup-installation-test">Installation test scripts</a> are to be updated to add the feature of sending the data to the server, that I’ll be creating during the coding period. I went through the scripts, and I must say, its written quite comprehensively. Also, the best part being, it may not be required to play with a lot of code in there, as the information that I need from the script, which is mainly <strong>successfully installed packages</strong> list and <strong>failed installed packages</strong> list is directly available in the form of <code class="highlighter-rouge">python lists</code>. Here is a little code snippet of that :</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="n">checks</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="n">successes</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">failures</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">checks</span><span class="p">:</span>
        <span class="n">checks</span> <span class="o">=</span> <span class="n">CHECKS</span>
    <span class="k">for</span> <span class="n">check</span> <span class="ow">in</span> <span class="n">checks</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">checker</span> <span class="o">=</span> <span class="n">CHECKER</span><span class="p">[</span><span class="n">check</span><span class="p">]</span>
        <span class="k">except</span> <span class="nb">KeyError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">raise</span> <span class="n">InvalidCheck</span><span class="p">(</span><span class="n">check</span><span class="p">)</span><span class="c"># from e</span>
        <span class="n">_sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">'check {0}...</span><span class="se">\t</span><span class="s">'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">checker</span><span class="o">.</span><span class="n">full_name</span><span class="p">()))</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">version</span> <span class="o">=</span> <span class="n">checker</span><span class="o">.</span><span class="n">check</span><span class="p">()</span>
        <span class="k">except</span> <span class="n">DependencyError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">failures</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
            <span class="n">_sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">'fail</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">_sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">'pass</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
            <span class="n">successes</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">checker</span><span class="p">,</span> <span class="n">version</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">successes</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">Successes:</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">checker</span><span class="p">,</span><span class="n">version</span> <span class="ow">in</span> <span class="n">successes</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">'{0} {1}'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
                    <span class="n">checker</span><span class="o">.</span><span class="n">full_name</span><span class="p">(),</span>
                    <span class="n">version</span> <span class="ow">or</span> <span class="s">'unknown'</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">failures</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">Failures:'</span><span class="p">)</span>
        <span class="n">printed</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">failure</span> <span class="ow">in</span> <span class="n">failures</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">failure</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">printed</span><span class="p">:</span>
                <span class="k">print</span><span class="p">()</span>
                <span class="k">print</span><span class="p">(</span><span class="n">failure</span><span class="p">)</span>
                <span class="n">printed</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">failure</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="bp">True</span>
</code></pre>
</div>

<p>I’ve my end semester exams coming up from 9 May, 2016, so will be occupied with that mostly from now on. Will post further updates soon! :)</p>

	  ]]></description>
	</item>


</channel>
</rss>
